name: Build and Deploy Spring Boot Application

on:
  push:
    branches:
      - main  # Trigger the workflow on pushes to the main branch

jobs:
  build-and-deploy:
    name: Build Docker Image and Deploy
    runs-on: ubuntu-latest
    env:
      CI: false

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Java and Maven
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      # Step 3: Build the Spring Boot app
      - name: Build Spring Boot Application
        run: |
          mvn package spring-boot:repackage -X -DREACT_APP_API_BASE_URL=https://lifeofbees.co.uk
        env:
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          
      # Step 4: Build Docker Image
      - name: Build Docker Image
        run: |
          docker build -t spring-boot-app:latest .

      # Step 5: Save Docker Image as a tar file
      - name: Save Docker Image
        run: |
          docker save -o spring-boot-app.tar spring-boot-app:latest

      # Step 6: Copy Docker Image to Remote Host
      - name: Copy Docker Image to Remote Host
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          source: "spring-boot-app.tar"
          target: "/home/${{ secrets.SSH_USER }}"

      # Step 7: Load Docker Image and Deploy on Remote Host
      - name: Deploy on Remote Host
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            # Load the Docker image
            docker load -i /home/${{ secrets.SSH_USER }}/spring-boot-app.tar

            # Stop and remove the existing container
            docker stop spring-boot-app || true
            docker rm spring-boot-app || true

            # Run the new container
            docker run -d --name spring-boot-app --network host -e SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }} -e SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }} -e JWT_SECRET=${{ secrets.JWT_SECRET }} -e SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GITHUB_CLIENT_ID=Ov23liktJYTdB2VdLt4y -e SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GITHUB_CLIENT_SECRET=212603ce9b320e50f67386dd11ff5686229b2037 spring-boot-app:latest
